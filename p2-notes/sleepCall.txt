send.c:		unsleep(pid);
Binary file .initialize.c.swp matches
kill.c:		unsleep(pid);
recvtime.c:		if (insertd(currpid,sleepq,maxwait) == SYSERR) {
main.c:		sleepms(200);
wakeup.c:	/* Awaken all processes that have no more time to sleep */
wakeup.c:	while (nonempty(sleepq) && (firstkey(sleepq) <= 0)) {
wakeup.c:		ready(dequeue(sleepq));
clkhandler.c:	/* Handle sleeping processes if any exist */
clkhandler.c:	if(!isempty(sleepq)) {
clkhandler.c:		/*   sleep queue, and awaken if the count reaches zero	*/
clkhandler.c:		if((--queuetab[firstid(sleepq)].qkey) <= 0) {
clkinit.c:qid16	sleepq;			/* Queue of sleeping processes		*/
clkinit.c: * clkinit  -  Initialize the clock and sleep queue at startup (x86)
clkinit.c:	/* Allocate a queue to hold the delta list of sleeping processes*/
clkinit.c:	sleepq = newqueue();
sleep.c:/* sleep.c - sleep sleepms */
sleep.c: *  sleep  -  Delay the calling process n seconds
sleep.c:syscall	sleep(
sleep.c:	sleepms(1000*delay);
sleep.c: *  sleepms  -  Delay the calling process n milliseconds
sleep.c:syscall	sleepms(
sleep.c:	if (insertd(currpid, sleepq, delay) == SYSERR) {
initialize.c: * suspended, wait for a semaphore, put to sleep, or exit.  In
unsleep.c:/* unsleep.c - unsleep */
unsleep.c: *  unsleep  -  Internal function to remove a process from the sleep
unsleep.c:status	unsleep(
unsleep.c:        pid32	pidnext;		/* ID of process on sleep queue	*/
unsleep.c:	/* Verify that candidate process is on the sleep queue */
