#+TITLE: Submission
* What is the ready list? List all the system calls that operate on it.
- The 'ready list' is a queue of processes that are ready to be run, meaning that the process state has been set to PR_READY.
- initialize.c creates the ready list
- resched.c operates with the ready list, checking if the priority of the of 'old' process is greater than the priority of the process at the fron of the readylist queue
- resched.c inserts processes into the readylist
- resched.c pulls items from the front of the ready list
- ready.c inserts processes into the ready list

* What is the default process scheduling policy used in Xinu? Can this policy lead to process starvation? Explain your answer
- Round robin
- No, the process scheduler is determining which process to use with a fair scheduling policy, meaning that the processes in the ready list can't be ignored

* When  a  context  switch  happens, how  does the resched function decide  if  the  currently  executing  process should be put back into the ready list?
- If the process is currently running, the resched function checks the process' priority. If the priority of the currently running process is higher than the process at the front of the ready queue, the rescheduling functions returns, without processing a context switch. If the process' priority is not higher than the front of the ready queue, and the process is currently running, the process is inserted back into the ready list

* Analyze Xinu code and list all circumstances that can trigger a scheduling event.
- Process creation
-
* Implement the function syscall print_ready_list() that prints the identifiers of the processes currently in the ready list. You don’t need to document this function in your report.
* Add to the PCB the following fields:
** uint32 runtime – number of milliseconds the process has been running (i.e., in PR_CURR state).
** uint32 turnaroundtime – turnaround time in milliseconds.
** uint32 num_ctxsw – number of context switch operations *to* the process.
* Description
- In this project, we will group processes in two categories: system processes and user processes. In particular, we will call “system processes” the processes spawned by default by Xinu (e.g., startup, main, etc.), and“user processes” the ones used to model user applications. This second category includes the processes spawned by the main function. User processes can, in turn, spawn other user processes. For this project, you can ignore the shell process (as it won’t be invoked in any of the test cases).
- Sytem Process = process spawned by default by xinu (eg, startup, main, etc)
- User Process = process used to model user applications, processes spawned by main function
- Write a create_user_process function to explicitly spawn user processes (this function can invoke the standard create function internally).
- The create_user_process function should have the following interface (note: it must not include a priority parameter).
