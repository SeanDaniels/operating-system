/* resched.c - resched, resched_cntl */

#include "../include/xinu.h" 
#define DBG
#define DEBUG_CTXSW

struct	defer	Defer;

/*------------------------------------------------------------------------
 *  resched  -  Reschedule processor to highest priority eligible process
 *------------------------------------------------------------------------
 */
void	resched(void)		/* Assumes interrupts are disabled	*/
{
	struct procent *ptold;	/* Ptr to table entry for old process	*/
	struct procent *ptnew;	/* Ptr to table entry for new process	*/

	uint32 oldPID, newPID;
	uint32 lottery_protocol = -1;
	/* If rescheduling is deferred, record attempt and return */

	if (Defer.ndefers > 0) {
		Defer.attempt = TRUE;
		return;
	}

	/* Point to process table entry for the current (old) process */

	ptold = &proctab[currpid];
	oldPID = currpid;

#ifdef DBG
	if(ptold->prprio==USERPROCESSPRIO){
			kprintf("***User Process***\n");
			lottery_protocol = 1;

	}
#endif
    /* Process is currently running
	 * Process remains eligible */
	if (ptold->prstate == PR_CURR) {
		/*  if priority of currently running task is greater than front of ready list */
		if (ptold->prprio > firstkey(readylist)) {
			kprintf("***Process Remaining at highest priority***\n");
			ptold->runtime += ((clktime*1000) + ctr1000)  - ptold->runtimeStart;
			if(lottery_protocol==-1){
				return;
			}
		}
		/*  current user process has same priority as next process */
		//working but may be the problem
		//if((ptold->prprio==USERPROCESSPRIO)&&(ptold->prprio==firstkey(readylist))){
		if(ptold->prprio==USERPROCESSPRIO&&firstkey(readylist)==USERPROCESSPRIO){
#ifdef DBG
			kprintf("***Lottery***\n");
#endif
			lottery_protocol = draw_lottery_tickets();
			/*  lottery not necessary, run next process */
			if(lottery_protocol==-1){
#ifdef DBG
				kprintf("No tickets, lottery cancelled\n");
#endif
			}
			else{
#ifdef DBG
				kprintf("Lottery generated a winner: Process %d\n", lottery_protocol);
#endif
				if(lottery_protocol==currpid){
#ifdef DBG
					kprintf("Lottery winner is current process\n");
#endif
					ptold->runtime += ((clktime*1000) + ctr1000)  - ptold->runtimeStart;
					return;
				}
			}
		}
		/*  Update process run time */
		/* Reinsert process into ready list */
		ptold->prstate = PR_READY;
		insert(currpid, readylist, ptold->prprio);
	}
	/*  update runtime for process being switched from */
	ptold->runtime += ((clktime*1000) + ctr1000)  - ptold->runtimeStart;
	int tempCount = 0;
	int runAgain = 0;
	if(lottery_protocol!=-1){
		//currpid = dequeue(readylist);
		currpid = dequeue(readylist);
		if(currpid!=lottery_protocol){
			runAgain=1;
		}
		while(runAgain||tempCount<50){
			tempCount++;
			insert(currpid,readylist, USERPROCESSPRIO);
			currpid = dequeue(readylist);
			if(currpid==lottery_protocol){
				runAgain=0;
			}
		}
		/* if(currpid!=lottery_protocol){ */

		/* 	kprintf("Error\nLottery winner: %d - Current Pid: %d\n", lottery_protocol, currpid); */
		/* 	kprintf("Printing lottery list\n"); */
		/* 	print_list(); */
		/* } */

	}

	else{
		currpid = dequeue(readylist);
	}

	/* Force context switch to highest priority ready process */
	newPID = currpid;
	ptnew = &proctab[currpid];
	ptnew->prstate = PR_CURR;
	ptnew->num_ctxsw+=1;
	ptnew->runtimeStart = (clktime*1000)+ctr1000;
	preempt = QUANTUM;		/* Reset time slice for process	*/
#ifdef DEBUG_CTXSW
	kprintf("\nctxsw::%d-%d\n", oldPID,newPID);
#endif
	ctxsw(&ptold->prstkptr, &ptnew->prstkptr);
	/* Old process returns here when resumed */

	return;
}

/*------------------------------------------------------------------------
 *  resched_cntl  -  Control whether rescheduling is deferred or allowed
 *------------------------------------------------------------------------
 */
status	resched_cntl(		/* Assumes interrupts are disabled	*/
	  int32	defer		/* Either DEFER_START or DEFER_STOP	*/
	)
{
	switch (defer) {

	    case DEFER_START:	/* Handle a deferral request */

		if (Defer.ndefers++ == 0) {
			Defer.attempt = FALSE;
		}
		return OK;

	    case DEFER_STOP:	/* Handle end of deferral */
		if (Defer.ndefers <= 0) {
			return SYSERR;
		}
		if ( (--Defer.ndefers == 0) && Defer.attempt ) {
			resched();
		}
		return OK;

	    default:
		return SYSERR;
	}
}
