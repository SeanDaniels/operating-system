#+TITLE: P3 Notes
* Stack Information
#+BEGIN_SRC C
int bar(int a, int b){
    int x, y;
    x = 555;
    y = a + b;
    return y;

}

void foo(void){
    bar(111, 222)
}
#+END_SRC
| Bottom of stack (in foo(void))         | Bottom of stack |                                                   |
| Saved EBP                              |                 |                                                   |
| 222                                    |                 |                                                   |
| 111                                    |                 | Now foo calls bar()                               |
| return address to foo                  |                 | On entry into bar, previous value of ebp is saved |
| saved ebp from foo                     | ebp             |                                                   |
| x                                      |                 |                                                   |
| y                                      |                 |                                                   |
| test_and_set(uint32 arg1, uint32 arg2) |                 |                                                   |
* Note
  - Consider that, after ptr is read into EBX, EBX contains just a memory address. The xchg instruction needs to read the value at that memory location. So, you will need to use indirection to read and write memory: (EBX)
  - if your code uses EBX, you want to save the value of EBX on the stack after saving the value of EBP.
  - You don't need " movl 4(%ebp), %esp" at the end because the value of ESP is updated automatically.
  - At the end you need to pop EBX and EBP from the stack because you had pushed them on the stack at the beginning. But, you should not call popal, because it would pop all registers from the stack. But, you had not used pushal before, and so the content expected by popal is not on the stack.
